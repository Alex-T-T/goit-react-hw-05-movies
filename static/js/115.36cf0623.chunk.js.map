{"version":3,"file":"static/js/115.36cf0623.chunk.js","mappings":"+PAUMA,GAAUC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sQAiBPE,EAAiB,mCAAG,WAAOC,GAAP,6EACN,mCADM,SAECC,MAAM,mDAAD,OAAoDD,EAApD,oBADZ,qCADM,YAEhBE,EAFgB,QAGLC,GAHK,yCAIPD,EAASE,QAJF,gCAMPC,QAAQC,OAAO,IAAIC,MAAJ,uBANR,2CAAH,sDA2EvB,UAjEe,WAAO,IAAD,IAEjB,GAA4BC,EAAAA,EAAAA,UAAQ,UAACC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,kBAAxC,QAAsD,MAA1F,eAAOC,EAAP,KAAeC,EAAf,KAGA,GAA0BP,EAAAA,EAAAA,UAAS,IAAnC,eAAOQ,EAAP,KAAcC,EAAd,KACA,GAAkCT,EAAAA,EAAAA,WAAS,GAA3C,eAAOU,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAM,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,GAC5CC,QAAQC,IAAI,YAAaH,IAEzBI,EAAAA,EAAAA,YAAU,WAINlB,OAAOC,aAAakB,QAAQ,SAAUrB,KAAKsB,UAAUjB,GAExD,GAAE,CAACA,KAEJe,EAAAA,EAAAA,YAAU,WACQ,KAAVb,IAIJG,GAAa,GAEbpB,EAAkBiB,GACbgB,MAAK,SAAC9B,GACHa,EAAUb,GACViB,GAAa,EAChB,IACAc,OAAM,SAAAC,GACH7B,QAAQC,OAAO,IAAIC,MAAJ,UAAa2B,EAAMC,UACrC,IACR,GAAE,CAACnB,IAYJ,OACI,iCACI,SAAC,IAAD,CAAcoB,aAZD,SAACC,GACVA,IAAgBrB,GAIxBC,EAASoB,GACTtB,EAAU,MACVO,EAAgC,KAAhBe,EAAqB,CAAEC,MAAOD,GAAgB,CAAC,IAL/DE,MAAM,0BAMT,IAKQrB,IAAa,4BACV,mDACI,SAAC,KAAD,OAEPJ,IAAU,wBACoB,IAA1BA,EAAO0B,QAAQC,OACV3B,EAAO0B,QAAQE,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACxB,OAAO,yBAAa,UAAChD,EAAD,CAASiD,GAAE,UAAKF,GAAMG,MAAO,CAACC,KAAMxB,GAAWyB,KAAG,EAAlD,cAAqDJ,MAAzDD,EACnB,KACC,mDAIrB,C","sources":["components/Movies/Movies.jsx"],"sourcesContent":["import { useState, useEffect} from \"react\"\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MoviesSearch from \"./MoviesSearch\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Dna } from 'react-loader-spinner';\n\n// import {TiArrowBack} from 'react-icons/ti'\n\n// styles for NavLink\nconst NavItem = styled(NavLink)`\ndisplay: block;\nwidth: 300px;\npadding: 8px;\nborder-radius: 4px;\ntext-decoration: none;\ncolor: #000;\n\n    :hover,\n    :focus-visible {\n        color: #fff;\n        background: linear-gradient(to right, #1488cc, #2b32b2);\n    }\n`\n\n\n// Fetch to search movies\nconst fetchSearchMovies = async (searchQuery) => {\n    const API_KEY = '85df3ff8d6dde44e5fe9194c59be3b9a';\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?query=${searchQuery}&api_key=${API_KEY}`)\n        if (response.ok) {\n            return response.json();\n            }\n            return Promise.reject(new Error(`We have a problem`))\n        }\n\n\nconst Movies = () => {\n\n    const [movies, setMovies] = useState(JSON.parse(window.localStorage.getItem('movies')) ?? null);\n    // const [movies, setMovies] = useState(null);\n\n    const [value, setValue] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const location = useLocation();\n    const filter = searchParams.get('query') ?? '';\n    console.log('filter =>', filter);\n\n    useEffect(() => {\n        \n        // console.log(movies)\n        // console.log('Refresh movies')\n        window.localStorage.setItem('movies', JSON.stringify(movies))\n\n    }, [movies])\n\n    useEffect(() => {\n        if (value === '') {\n            return\n        }\n\n        setIsLoading(true);\n\n        fetchSearchMovies(value)\n            .then((response) => {\n                setMovies(response)\n                setIsLoading(false)\n            })\n            .catch(error => {\n                Promise.reject(new Error(`${error.message}`))\n            })\n    }, [value])\n\n    const onFormSubmit = (searchValue) => {\n            if (searchValue === value) {\n        alert(\"Enter new search value!\");\n        return\n        }\n        setValue(searchValue)\n        setMovies(null)\n        setSearchParams(searchValue !== '' ? { query: searchValue } : {})\n    }\n\n    return (\n        <>\n            <MoviesSearch onFormSubmit={ onFormSubmit} />\n            {isLoading && <div>\n                <p>Loading... Please wait</p> \n                    <Dna/> \n            </div>}\n            {movies && <ul>\n                {movies.results.length !== 0\n                    ? movies.results.map(({ id, title }) => {\n                        return <li key={id}><NavItem to={`${id}`} state={{from: location}} end> {title }</NavItem></li>\n                    })\n                    : <p>Change your request</p>}\n                </ul>}\n        </>\n    )\n}\n\nexport default Movies;"],"names":["NavItem","styled","NavLink","fetchSearchMovies","searchQuery","fetch","response","ok","json","Promise","reject","Error","useState","JSON","parse","window","localStorage","getItem","movies","setMovies","value","setValue","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","filter","get","console","log","useEffect","setItem","stringify","then","catch","error","message","onFormSubmit","searchValue","query","alert","results","length","map","id","title","to","state","from","end"],"sourceRoot":""}