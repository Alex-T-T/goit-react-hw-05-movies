{"version":3,"file":"static/js/247.f25eecc2.chunk.js","mappings":"gNAGMA,EAAS,mCAAG,WAAOC,GAAP,6EACE,mCADF,SAESC,MAAM,sCAAD,OAAuCD,EAAvC,4BADZ,qCADF,YAERE,EAFQ,QAGGC,GAHH,yCAICD,EAASE,QAJV,gCAMCC,QAAQC,OAAO,IAAIC,MAAJ,uBANhB,2CAAH,sDAkDf,UAzCa,WAET,OAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAON,EAAP,KAAiBO,EAAjB,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAYP,IAVAE,EAAAA,EAAAA,YAAU,WACNb,EAAUc,OAAOH,IACZI,KAAKL,GACLM,OAAM,SAAAC,GACHX,QAAQC,OAAO,IAAIC,MAAJ,UAAaS,EAAMC,UACrC,GACR,GAAC,CAACP,IAEHQ,QAAQC,IAAIT,IAEPR,EACD,OAAO,KAGX,IAAQkB,EAASlB,EAATkB,KACRF,QAAQC,IAAIjB,GAEX,IAAMmB,EAAmB,SAACC,GAIvB,OAHkBA,EAAY,6CACcA,GACtC,0DAET,EAED,OAAQ,wBACHF,EAAKG,KAAI,YAAkD,IAAhDvB,EAA+C,EAA/CA,GAAIsB,EAA2C,EAA3CA,aAAcE,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,UAC7C,OACI,2BACI,gBAAKC,IAAKL,EAAiBC,GAAeK,IAAKH,EAAeI,MAAM,QACpE,uBAAIJ,KACJ,wCAAiBC,OAHZzB,EAIF,KAGlB,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\"; \nimport { useParams } from \"react-router-dom\";\n\nconst fetchCast = async (id) => {\n    const API_KEY = '85df3ff8d6dde44e5fe9194c59be3b9a';\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`)\n        if (response.ok) {\n            return response.json();\n            }\n            return Promise.reject(new Error(`We have a problem`))\n        }\n\nconst Cast = () => {\n\n    const [response, setResponse] = useState(null)\n    const {movieId} = useParams();\n    \n    useEffect(() => {\n        fetchCast(Number(movieId))\n            .then(setResponse)\n            .catch(error => {\n                Promise.reject(new Error(`${error.message}`))\n            })\n    },[movieId])\n\n    console.log(movieId)\n\n    if (!response) {\n        return null\n    }\n\n    const { cast } = response\n    console.log(response)\n\n     const createProfileUrl = (profile_path) => {\n        const posterUrl = profile_path\n            ? `https://www.themoviedb.org/t/p/w500${profile_path}`\n            : 'https://klike.net/uploads/posts/2020-02/1581672938_2.jpg'\n        return posterUrl\n    } \n\n    return (<ul>\n        {cast.map(({id, profile_path, original_name, character}) =>{\n        return (\n            <li key={id}>\n                <img src={createProfileUrl(profile_path)} alt={original_name} width='90'/>\n                <p>{original_name}</p>\n                <p> Character: { character}</p>\n            </li>)})\n        }\n    </ul>)\n}\n\nexport default Cast;"],"names":["fetchCast","id","fetch","response","ok","json","Promise","reject","Error","useState","setResponse","movieId","useParams","useEffect","Number","then","catch","error","message","console","log","cast","createProfileUrl","profile_path","map","original_name","character","src","alt","width"],"sourceRoot":""}